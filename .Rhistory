tab = c()
for (i in 1:length(predID[[2]])) {
vals = unlist(predID[[2]][[i]][c(5,2:4)])
tab = rbind(tab, vals)
}
head(tab)
tab = as.data.frame(tab, row.names = FALSE)
names(tab) = c("file", "predicted_id", "prediction_score", "prediction_margin")
head(tab)
newID_table = c()
for (i in 1:nrow(tab)) {
test_file = tab[i,1]
newID_exemplar_file = filenames[,3][filenames[,1] == tab[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
newID_exemplar_img = paste0(pandoc.image.return(newID_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], tab[i,2:4], test_img, newID_exemplar_img)
newID_table = rbind(newID_table, row)
}
kableExtra::kable(newID_table) %>%
kableExtra::kable_styling(full_width = FALSE)
i=1
test_file = tab[i,1]
test_file
filenames[,3][filenames[,1] == tab[i,2]]
filenames[,3]
filenames[,3][filenames[,1] == tab[i,2]]
tab[i,2]
head(files_names)
head(file_names)
head(filenames)
path = 'C:/Users/HarmerA/OneDrive - MWLR/repos/tephritidML/img/trupanea_model/img_sorted'
subdirs = tibble(class = list.dirs(path, recursive = FALSE, full.names = FALSE), path = list.dirs(path, recursive = FALSE))
filenames = subdirs %>%
mutate(first_file = map_chr(path, ~list.files(.x, full.names = TRUE)[1]))
head(filenames)
prediction_table = c()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "/")[[1]][10], misID[i,2:4], test_img, prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
filenames = subdirs %>%
mutate(first_file = map_chr(path, ~list.files(.x, full.names = TRUE)[1]))
misID = data.frame(file = py$file_name, actual = py$y_test, pred = py$predicted, score = unlist(py$score)) %>%
filter(pred != actual)
misFile = c()
for (i in 1:nrow(misID)) {
file = paste0('C:/Users/HarmerA/OneDrive - MWLR/repos/tephritidML/img/trupanea_model/img_sorted/', misID[i,1])
misFile = c(misFile, file)
}
prediction_table = c()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "/")[[1]][10], misID[i,2:4], test_img, prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
i=1
misID[i,2]
subdirs = tibble(class = list.dirs(path, recursive = FALSE, full.names = FALSE), path = list.dirs(path, recursive = FALSE))
subdirs
filenames = subdirs %>%
mutate(first_file = map_chr(path, ~list.files(.x, full.names = TRUE)[1]))
filenames
py$file_name
reticulate::repl_python()
DATASET_PATH = 'C:/Users/harmera/OneDrive - MWLR/repos/tephritidML/'
model_dir = DATASET_PATH + 'models/'
model_name = 'Xception'
labels_path = DATASET_PATH + 'labels/labels3.csv'
results = []
for i in range(1,4):
model_file = model_dir + 'trupanea_v1_{}_Xception_transfer.h5'.format(i)
images_path = DATASET_PATH + 'img/trupanea_model/img_folds/{}/'.format(i)
test_data_dir = images_path + 'val/'
_, answers = test_model(model_file, labels_path, test_data_dir, model_name)
results += answers
predicted = [tup[1] for tup in results]
y_test = [tup[0] for tup in results]
file_name = [tup[3] for tup in results]
score = [tup[2] for tup in results]
report = classification_report(y_test, predicted, output_dict = True)
report = DataFrame(report).transpose()
quit
DATASET_PATH = 'C:/Users/harmera/OneDrive - MWLR/repos/tephritidML/'
model_dir = paste0(DATASET_PATH, 'models/')
model_path = paste0(model_dir, 'trupanea_v1_1_Xception_transfer.h5')
path = 'C:/Users/HarmerA/OneDrive - MWLR/repos/tephritidML/img/trupanea_model/img_sorted'
subdirs = tibble(class = list.dirs(path, recursive = FALSE, full.names = FALSE), path = list.dirs(path, recursive = FALSE))
filenames = subdirs %>%
mutate(first_file = map_chr(path, ~list.files(.x, full.names = TRUE)[1]))
misID = data.frame(file = py$file_name, actual = py$y_test, pred = py$predicted, score = unlist(py$score)) %>%
filter(pred != actual)
misID
misFile = c()
for (i in 1:nrow(misID)) {
file = paste0('C:/Users/HarmerA/OneDrive - MWLR/repos/tephritidML/img/trupanea_model/img_sorted/', misID[i,1])
misFile = c(misFile, file)
}
prediction_table = c()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "/")[[1]][10], misID[i,2:4], test_img, prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
reticulate::repl_python()
DATASET_PATH = 'C:/Users/harmera/OneDrive - MWLR/repos/tephritidML/'
model_dir = DATASET_PATH + 'models/'
model_path = model_dir + 'trupanea_v2_full_Xception_transfer.h5'
model_name = 'Xception'
labels_path = DATASET_PATH + 'labels/labels3.csv'
test_images_path = DATASET_PATH + 'img/trupanea_model/img_unk/'
predID = predict_new(model_path, labels_path, test_images_path, model_name)
quit
# preds = predict_new(model_path, labels_path, test_images_path, model_name)
predID = py$predID
tab = c()
for (i in 1:length(predID[[2]])) {
vals = unlist(predID[[2]][[i]][c(5,2:4)])
tab = rbind(tab, vals)
}
tab = as.data.frame(tab, row.names = FALSE)
names(tab) = c("file", "predicted_id", "prediction_score", "prediction_margin")
newID_table = c()
for (i in 1:nrow(tab)) {
test_file = tab[i,1]
newID_exemplar_file = filenames[,3][filenames[,1] == tab[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
newID_exemplar_img = paste0(pandoc.image.return(newID_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], tab[i,2:4], test_img, newID_exemplar_img)
newID_table = rbind(newID_table, row)
}
kableExtra::kable(newID_table) %>%
kableExtra::kable_styling(full_width = FALSE)
filenames
as.vector(unlist(read_csv("C:/Users/HarmerA/OneDrive - MWLR/repos/tephritidML/labels/labels3.csv", col_names = FALSE)))
head(misFile)
misFile
misID
reticulate::repl_python()
View(answers)
quit
py$file_name
str_match(py$file_name, "\\\s*(.*?)\\s*_")[,2]
str_match(py$file_name, "\\s*(.*?)\\s*_")[,2]
str_match(py$file_name, "N\\s*(.*?)\\s*_")[,2]
y$file_name
py$file_name
substring(py$file_name, regexpr("N", string) + 1)
substring(py$file_name, regexpr("N", py$file_name) + 1)
substring(py$file_name, regexpr("N", py$file_name) - 1)
substring(py$file_name, regexpr("N", py$file_name))
substring(py$file_name, regexpr("N", py$file_name)) %>% substring(12)
substring(py$file_name, regexpr("N", py$file_name))
?SUBSTRING
?substring
substring(py$file_name, regexpr("N", py$file_name)) %>% substring(first = 12)
substring(py$file_name, regexpr("N", py$file_name)) %>% substring(start = 12)
substring(py$file_name, regexpr("N", py$file_name)) %>% substring(last = 12)
substring(py$file_name, regexpr("N", py$file_name)) %>% substring(stop = 12)
substring(py$file_name, regexpr("N", py$file_name)) %>% substring(1, 12)
length(misFile)
nrow(misID)
misID
substring(mis_ID[,1], regexpr("N", py$file_namemis_ID[,1])) %>% substring(1, 12)
substring(misID[,1], regexpr("N", misID[,1])) %>% substring(1, 12)
prediction_table = c()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = substring(misID[,1], regexpr("N", misID[,1])) %>% substring(1, 12), misID[i,2:4], test_img, prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
warnings()
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
prediction_table = c()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = substring(misID[,1], regexpr("N", misID[,1])) %>% substring(1, 12), misID[i,2:4], test_img, prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
nrow(misID)
substring(misID[,1], regexpr("N", misID[,1])) %>% substring(1, 12)
misID[i,2:4]
substring(misID[i,1], regexpr("N", misID[i,1])) %>% substring(1, 12)
prediction_table = c()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = substring(misID[i,1], regexpr("N", misID[i,1])) %>% substring(1, 12), misID[i,2:4], test_img, prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
head(misID[,2:4])
prediction_table = c()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = substring(misID[i,1], regexpr("N", misID[i,1])) %>% substring(1, 12), misID[,4], misID[i,2], test_img, misID[i,3], prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
names(prediction_table) = c("file", "score", "actual", "actual_image", "predicted", "prediction_exemplar")
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
misID[i,4]
round(misID[i,4])
round(misID[i,4], 2)
prediction_table = c()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = substring(misID[i,1], regexpr("N", misID[i,1])) %>% substring(1, 12), round(misID[i,4], 2), misID[i,2], test_img, misID[i,3], prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
names(prediction_table) = c("file", "score", "actual", "actual_image", "predicted", "prediction_exemplar")
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
names(prediction_table) = c("file", "score", "actual", "actual_image", "predicted", "prediction_exemplar")
dim(prediction_table)
names(prediction_table)
prediction_table = data.frame()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = substring(misID[i,1], regexpr("N", misID[i,1])) %>% substring(1, 12), round(misID[i,4], 2), misID[i,2], test_img, misID[i,3], prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
names(prediction_table) = c("file", "score", "actual", "actual_image", "predicted", "prediction_exemplar")
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
misID
misID[1,]
misFile[1]
filenames[,3][filenames[,1] == misID[i,2]]
i=1
filenames[,3][filenames[,1] == misID[i,2]]
filenames
filenames[1,3]
filenames[6,3]
filenames[6,3]
misFile[6]
misID
prediction_table = data.frame()
for (i in 1:nrow(misID)) {
test_file = misFile[i]
prediction_exemplar_file = filenames[,3][filenames[,1] == misID[i,3]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
prediction_exemplar_img = paste0(pandoc.image.return(prediction_exemplar_file), "{width=100px}")
row = cbind(file = substring(misID[i,1], regexpr("N", misID[i,1])) %>% substring(1, 12), round(misID[i,4], 2), misID[i,2], test_img, misID[i,3], prediction_exemplar_img)
prediction_table = rbind(prediction_table, row)
}
names(prediction_table) = c("file", "score", "actual", "actual_image", "predicted", "prediction_exemplar")
kableExtra::kable(prediction_table) %>%
kableExtra::kable_styling(full_width = FALSE)
?render
predID = py$predID
tab = c()
for (i in 1:length(predID[[2]])) {
vals = unlist(predID[[2]][[i]][c(5,2:4)])
tab = rbind(tab, vals)
}
tab = as.data.frame(tab, row.names = FALSE)
names(tab) = c("file", "predicted_id", "prediction_score", "prediction_margin")
head(tab)
names(newID_table) = c("file", "test_image", "prediction_score", "prediction_margin", "predicted_ID", "prediction_exemplar")
kableExtra::kable(newID_table) %>%
kableExtra::kable_styling(full_width = FALSE)
newID_table = c()
for (i in 1:nrow(tab)) {
test_file = tab[i,1]
newID_exemplar_file = filenames[,3][filenames[,1] == tab[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
newID_exemplar_img = paste0(pandoc.image.return(newID_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], test_img, tab[i,3:4], tab[i,2], newID_exemplar_img)
newID_table = rbind(newID_table, row)
}
names(newID_table) = c("file", "test_image", "prediction_score", "prediction_margin", "predicted_ID", "prediction_exemplar")
kableExtra::kable(newID_table) %>%
kableExtra::kable_styling(full_width = FALSE)
round(tab[i,3:4], 2)
round(tab[i,3], 2)
tab[i,3]
as.numeric(tab[i,3:4])
round(as.numeric(tab[i,3:4]), 2)
newID_table = data.frame()
for (i in 1:nrow(tab)) {
test_file = tab[i,1]
newID_exemplar_file = filenames[,3][filenames[,1] == tab[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
newID_exemplar_img = paste0(pandoc.image.return(newID_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], test_img, round(as.numeric(tab[i,3:4]), 2), tab[i,2], newID_exemplar_img)
newID_table = rbind(newID_table, row)
}
names(newID_table) = c("file", "test_image", "prediction_score", "prediction_margin", "predicted_ID", "prediction_exemplar")
kableExtra::kable(newID_table) %>%
kableExtra::kable_styling(full_width = FALSE)
newID_table = data.frame()
for (i in 1:nrow(tab)) {
test_file = tab[i,1]
newID_exemplar_file = filenames[,3][filenames[,1] == tab[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
newID_exemplar_img = paste0(pandoc.image.return(newID_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], test_img, round(as.numeric(tab[i,3:4]), 2), tab[i,2], newID_exemplar_img)
newID_table = rbind(newID_table, row)
}
names(newID_table) = c("file", "test_image", "prediction_score", "prediction_margin", "predicted_ID", "prediction_exemplar")
kableExtra::kable(newID_table) %>%
kableExtra::kable_styling(full_width = FALSE)
newID_table = data.frame()
for (i in 1:nrow(tab)) {
test_file = tab[i,1]
newID_exemplar_file = filenames[,3][filenames[,1] == tab[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
newID_exemplar_img = paste0(pandoc.image.return(newID_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], test_img, round(as.numeric(tab[i,3:4]), 2), tab[i,2], newID_exemplar_img)
newID_table = rbind(newID_table, row)
}
class(newID_table)
names(newID_table) = c("file", "test_image", "prediction_score", "prediction_margin", "predicted_ID", "prediction_exemplar")
round(as.numeric(tab[i,3:4]), 2)
newID_table = data.frame()
for (i in 1:nrow(tab)) {
test_file = tab[i,1]
newID_exemplar_file = filenames[,3][filenames[,1] == tab[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
newID_exemplar_img = paste0(pandoc.image.return(newID_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], test_img, round(as.numeric(tab[i,3]), 2), round(as.numeric(tab[i,4]), 2), tab[i,2], newID_exemplar_img)
newID_table = rbind(newID_table, row)
}
names(newID_table) = c("file", "test_image", "prediction_score", "prediction_margin", "predicted_ID", "prediction_exemplar")
kableExtra::kable(newID_table) %>%
kableExtra::kable_styling(full_width = FALSE)
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], test_img, round(as.numeric(tab[i,3]), 2), round(as.numeric(tab[i,4]), 1), tab[i,2], newID_exemplar_img)
newID_table = data.frame()
for (i in 1:nrow(tab)) {
test_file = tab[i,1]
newID_exemplar_file = filenames[,3][filenames[,1] == tab[i,2]]
test_img = paste0(pandoc.image.return(test_file), "{width=100px}")
newID_exemplar_img = paste0(pandoc.image.return(newID_exemplar_file), "{width=100px}")
row = cbind(file = strsplit(test_file, "\\\\")[[1]][3], test_img, round(as.numeric(tab[i,3]), 2), round(as.numeric(tab[i,4]), 1), tab[i,2], newID_exemplar_img)
newID_table = rbind(newID_table, row)
}
names(newID_table) = c("file", "test_image", "prediction_score", "prediction_margin", "predicted_ID", "prediction_exemplar")
kableExtra::kable(newID_table) %>%
kableExtra::kable_styling(full_width = FALSE)
pacman::p_load(tidyverse, pander, patchwork, terra, viridis, reticulate, kableExtra)
source_python("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/python/train_test_functions.py")
dat1 = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/logs/hymenoptera_v1_1_Xception_200_epoch_transfer_earlyStop_log.csv") %>%
pivot_longer(!epoch, names_to = "stat", values_to = "value")
dat2 = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/logs/hymenoptera_v1_2_Xception_200_epoch_transfer_earlyStop_log.csv") %>%
pivot_longer(!epoch, names_to = "stat", values_to = "value")
dat3 = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/logs/hymenoptera_v1_3_Xception_200_epoch_transfer_earlyStop_log.csv") %>%
pivot_longer(!epoch, names_to = "stat", values_to = "value")
acc_plot = dat1 %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line(linewidth = 1) +
geom_line(data = subset(dat2, stat == "accuracy" | stat == "val_accuracy"), aes(x = epoch, y = value, colour = stat), linewidth = 1) +
geom_line(data = subset(dat3, stat == "accuracy" | stat == "val_accuracy"), aes(x = epoch, y = value, colour = stat), linewidth = 1) +
scale_colour_manual(labels = c("Training accuracy", "Validation accuracy"), values = c("#70ad47", "#4472c4")) +
ylim(c(0.5,1)) +
xlab("\nEpoch") +
ylab("Accuracy\n") +
theme_classic(base_size = 16) +
theme(legend.title = element_blank(), legend.position = c(0.75, 0.25))
loss_plot = dat1 %>%
filter(stat == "loss" | stat == "val_loss") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line(linewidth = 1) +
geom_line(data = subset(dat2, stat == "loss" | stat == "val_loss"), aes(x = epoch, y = value, colour = stat), linewidth = 1) +
geom_line(data = subset(dat3, stat == "loss" | stat == "val_loss"), aes(x = epoch, y = value, colour = stat), linewidth = 1) +
scale_colour_manual(labels = c("Training loss", "Validation loss"), values = c("#70ad47", "#4472c4")) +
xlab("\nEpoch") +
ylab("Loss\n") +
theme_classic(base_size = 16) +
theme(legend.title = element_blank(), legend.position = c(0.75, 0.75))
acc_plot|loss_plot
preds
preds = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/R/hymenoptera_predictions_unid.csv")
anno = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/labels/annotation_unid.csv")
View(preds)
?substr
substr(preds$file, 6, 17)
preds %>%
mutate(accession = substr(file, 6, 17))
?arrange
preds = preds %>%
mutate(accession = substr(file, 6, 17)) %>%
arrange(accession)
preds = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/R/hymenoptera_predictions_unid.csv")
preds = preds %>%
mutate(accession = substr(file, 6, 17)) %>%
arrange(accession) %>%
relocate(accession, after = file)
preds = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/R/hymenoptera_predictions_unid.csv")
preds = preds %>%
mutate(accession = substr(file, 6, 17)) %>%
arrange(accession) %>%
relocate(accession, .after = file)
View(anno)
anno = anno %>%
arrange(accession)
preds = cbind(preds, anno$id_dw)
preds = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/R/hymenoptera_predictions_unid.csv")
preds = preds %>%
mutate(accession = substr(file, 6, 17)) %>%
arrange(accession) %>%
relocate(accession, .after = file)
anno = anno %>%
arrange(accession)
preds = cbind(preds, id_dw = tolower(anno$id_dw))
# Compare omdel predictions with groundtruthed IDs
anno = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/labels/annotation_unid.csv") %>%
arrange(accession)
preds = read_csv("C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/R/hymenoptera_predictions_unid.csv") %>%
mutate(accession = substr(file, 6, 17)) %>%
arrange(accession) %>%
relocate(accession, .after = file)
preds = cbind(preds, id_dw = tolower(anno$id_dw))
preds$ID = ifelse(preds$prediction == preds$id_dw, "CORRECT", "WRONG")
preds %>%
summarise(ID, count = count())
count(preds, ID)
203/717
mean(preds$score)
mean(preds$prediction_score)
sd(prediction_score)
sd(preds$prediction_score)
write_csv(preds, "C:/Users/harmera/OneDrive - MWLR/repos/hymenopteraML/R/hymenoptera_prediction_agreement.csv")
library(tidyr)
library(TeachingDemos)
dat = read.csv("C:/Users/harmera/Dropbox/data/coridromius/stress.csv")
stress = gather(dat, na.rm = TRUE, factor_key = TRUE)
colnames(stress) = c("species", "stress")
stress95 = ddply(stress, .(species), function(x) {x[x$stress < quantile(x$stress, 0.95),]})
reticulate::repl_python()
import yaml
from roboflow import Roboflow
reticulate::repl_python()
reticulate::repl_python()
import yaml
from roboflow import Roboflow
from roboflow import Roboflow
reticulate::repl_python()
import os
import yaml
from roboflow import Roboflow
from ultralytics import YOLO
os.chdir("C:/Users/harmera/Dropbox/data/label_ocr")
#Project set up from roboflow
rf = Roboflow(api_key="uHJ90XV1rwOgb1Sg4PdA")
project = rf.workspace("labelreader").project("detect_pin_labels")
dataset = project.version(2).download("yolov8")
dataset.location
with open(f'{dataset.location}/data.yaml', 'r') as file:
data = yaml.safe_load(file)
data['path'] = dataset.location
with open(f'{dataset.location}/data.yaml', 'w') as file:
yaml.dump(data, file, sort_keys=False)
model = YOLO("yolov8n.pt")
results = model.train(data='C:/Users/harmera/Dropbox/data/label_ocr/yolov8n.pt', epochs=100, imgsz=640, device=0)
results = model.train(data='C:/Users/harmera/Dropbox/data/label_ocr/yolov8n.pt', epochs=100, imgsz=640, device=0)
results = model.train(data='C:/Users/harmera/Dropbox/data/label_ocr/yolov8n.pt', epochs=100, imgsz=640, device=0)
results = model.train(data='C:/Users/harmera/Dropbox/data/label_ocr/yolov8n.pt', epochs=100, imgsz=640, device=0)
dataset = project.version(2).download("yolov8")
rf = Roboflow(api_key="uHJ90XV1rwOgb1Sg4PdA")
project = rf.workspace("labelreader").project("detect_pin_labels")
dataset = project.version(2).download("yolov8")
model = YOLO("yolov8n.pt")
results = model.train(data='C:/Users/harmera/Dropbox/data/label_ocr/yolov8n.pt', epochs=100, imgsz=640, device=0)
results = model.train(data='C:/Users/harmera/Dropbox/data/label_ocr/yolov8n.pt', epochs=100, imgsz=640, device=0)
results = model.train(data='C:/Users/harmera/Dropbox/data/label_ocr/yolov8n.pt', epochs=100, imgsz=640, device=0)
with open(f'{dataset.location}/data.yaml', 'r') as file:
data = yaml.safe_load(file)
data['path'] = dataset.location
with open(f'{dataset.location}/data.yaml', 'w') as file:
yaml.dump(data, file, sort_keys=False)
quit
reticulate::repl_python()
import streamlit as st
st.write("Hello, World!")
